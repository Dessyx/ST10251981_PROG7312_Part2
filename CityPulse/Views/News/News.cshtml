@model List<CityPulse.Models.Announcement>
@{
    ViewData["Title"] = "News & Announcements";
}

<div class="container-fluid py-4">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <h1 class="display-5 fw-bold text-dark" title="Latest municipal news and announcements">
                <i class="bi bi-newspaper me-2"></i>News & Announcements
            </h1>
            <p class="lead text-muted">Stay informed about the latest updates, events, and municipal programs in your community.</p>
        </div>
    </div>

    <!-- Search and Filter Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm border-dark" style="border-width: 2px; border-radius: 15px; overflow: visible;">
                <div class="card-body bg-white" style="border-radius: 15px;">
                    <h5 class="card-title mb-3"><i class="bi bi-search me-2"></i>Search & Filter Events</h5>
                    
                    <div class="row g-3">
                        <!-- Search Bar -->
                        <div class="col-12 col-lg-4">
                            <label for="searchInput" class="form-label fw-semibold">Search Events</label>
                            <div class="input-group">
                                <span class="input-group-text bg-white" style="border-radius: 20px 0 0 20px;"><i class="bi bi-search"></i></span>
                                <input type="text" 
                                       class="form-control" 
                                       id="searchInput" 
                                       placeholder="Search by title or description..."
                                       aria-label="Search events"
                                       style="border-radius: 0 20px 20px 0;">
                            </div>
                        </div>

                        <!-- Category Filter -->
                        <div class="col-12 col-md-6 col-lg-3">
                            <label for="categoryFilter" class="form-label fw-semibold">Category</label>
                            <select class="form-select" id="categoryFilter" aria-label="Filter by category" style="border-radius: 20px;">
                                <option value="all" selected>All Categories</option>
                                <option value="Announcement">Announcements</option>
                                <option value="Event">Community Events</option>
                                <option value="ServiceUpdate">Service Updates</option>
                                <option value="Notice">Public Notices</option>
                                <option value="Program">Programs</option>
                                <option value="Emergency">Emergency Alerts</option>
                            </select>
                        </div>

                        <!-- Date From -->
                        <div class="col-12 col-md-6 col-lg-2">
                            <label for="dateFrom" class="form-label fw-semibold">From Date</label>
                            <input type="date" 
                                   class="form-control" 
                                   id="dateFrom" 
                                   aria-label="Start date"
                                   style="border-radius: 20px;">
                        </div>

                        <!-- Date To -->
                        <div class="col-12 col-md-6 col-lg-2">
                            <label for="dateTo" class="form-label fw-semibold">To Date</label>
                            <input type="date" 
                                   class="form-control" 
                                   id="dateTo" 
                                   aria-label="End date"
                                   style="border-radius: 20px;">
                        </div>

                        <!-- Action Buttons -->
                        <div class="col-12 col-md-6 col-lg-1 d-flex align-items-center" style="margin-top: 2.3rem;">
                            <button type="button" class="btn btn-sm btn-outline-dark w-100" id="clearFilters" title="Clear all filters" style="border-radius: 20px;">
                                <i class="bi bi-x-circle"></i> Clear
                            </button>
                        </div>
                    </div>

                    <!-- Quick Filter Chips -->
                    <div class="row mt-3">
                        <div class="col-12">
                            <label class="form-label fw-semibold d-block">Quick Filters:</label>
                            <div class="d-flex flex-wrap gap-2">
                                <button class="btn btn-sm filter-chip filter-chip-blue" data-filter="today">
                                    <i class="bi bi-calendar-day"></i> Today
                                </button>
                                <button class="btn btn-sm filter-chip filter-chip-green" data-filter="this-week">
                                    <i class="bi bi-calendar-week"></i> This Week
                                </button>
                                <button class="btn btn-sm filter-chip filter-chip-orange" data-filter="this-month">
                                    <i class="bi bi-calendar-month"></i> This Month
                                </button>
                                <button class="btn btn-sm filter-chip filter-chip-blue-alt" data-filter="upcoming">
                                    <i class="bi bi-calendar-event"></i> Upcoming Events
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Results Summary -->
    <div class="row mb-3">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <span id="resultCount" class="badge bg-dark text-white rounded-circle">@Model.Count</span> Events Found
                </h5>
                <div class="d-flex align-items-center gap-2">
                    <span class="text-muted small">View:</span>
                    <div class="btn-group view-toggle" role="group" aria-label="View options">
                        <input type="radio" class="btn-check" name="viewOptions" id="gridView" autocomplete="off" checked>
                        <label class="btn btn-outline-dark view-toggle-label" for="gridView" title="Grid view">
                            <i class="bi bi-grid-3x3-gap"></i> Grid
                        </label>
                        
                        <input type="radio" class="btn-check" name="viewOptions" id="listView" autocomplete="off">
                        <label class="btn btn-outline-dark view-toggle-label" for="listView" title="List view">
                            <i class="bi bi-list-ul"></i> List
                        </label>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Events Grid -->
    <div class="row g-4" id="eventsContainer">
        
        @foreach (var announcement in Model)
        {
            <div class="col-12 @(announcement.Category == CityPulse.Models.AnnouncementCategory.Event ? "col-md-6 col-lg-4" : "col-md-6 col-lg-4") event-card" 
                 data-category="@announcement.Category.ToString().ToLower()" 
                 data-date="@announcement.Date.ToString("yyyy-MM-dd")">
                
                @if (announcement.IsFeatured)
                {
                    <!-- Featured Announcement -->
                    <div class="card border-danger shadow-lg h-100 featured-card">
                        <div class="card-ribbon">
                            <span class="badge bg-danger">
                                <i class="bi bi-pin-angle-fill"></i> FEATURED
                            </span>
                        </div>
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start mb-3">
                                <div>
                                    <span class="badge @GetCategoryBadgeClass(announcement.Category) mb-2">
                                        <i class="@GetCategoryIcon(announcement.Category) me-2"></i>@announcement.Category
                                    </span>
                                    <h4 class="card-title fw-bold mb-1">@announcement.Title</h4>
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <p class="text-muted small mb-1">
                                    <i class="bi bi-calendar-event me-2 text-primary"></i>
                                    <strong>Published:</strong> @announcement.Date.ToString("MMM dd, yyyy")
                                </p>
                                @if (!string.IsNullOrEmpty(announcement.AffectedAreas))
                                {
                                    <p class="text-muted small mb-0">
                                        <i class="bi bi-geo-alt me-2 text-danger"></i>
                                        <strong>Affected Areas:</strong> @announcement.AffectedAreas
                                    </p>
                                }
                            </div>

                            <p class="card-text">@announcement.Description</p>

                            <div class="d-flex gap-2">
                                <a href="#" class="btn btn-danger">
                                    <i class="bi bi-file-text me-1"></i>Read Full Details
                                </a>
                                <button class="btn btn-outline-danger" title="Share event">
                                    <i class="bi bi-share"></i>
                                </button>
                                <button class="btn btn-outline-danger" title="Save for later">
                                    <i class="bi bi-bookmark"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <!-- Regular Announcement -->
                    <div class="card h-100 shadow-sm hover-lift">
                        <div class="card-header @GetCategoryHeaderClass(announcement.Category)">
                            <h6 class="mb-0">
                                <i class="@GetCategoryIcon(announcement.Category) me-2"></i>@announcement.Category
                            </h6>
                        </div>
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title fw-bold">@announcement.Title</h5>
                            
                            <div class="mb-3">
                                <p class="text-muted small mb-1">
                                    <i class="bi bi-calendar3 me-1"></i>
                                    <strong>Date:</strong> @announcement.Date.ToString("MMM dd, yyyy")
                                </p>
                                @if (!string.IsNullOrEmpty(announcement.Location))
                                {
                                    <p class="text-muted small mb-1">
                                        <i class="bi bi-geo-alt me-1"></i>
                                        <strong>Location:</strong> @announcement.Location
                                    </p>
                                }
                                @if (!string.IsNullOrEmpty(announcement.Duration))
                                {
                                    <p class="text-muted small mb-1">
                                        <i class="bi bi-clock me-1"></i>
                                        <strong>Duration:</strong> @announcement.Duration
                                    </p>
                                }
                                @if (!string.IsNullOrEmpty(announcement.AgeGroup))
                                {
                                    <p class="text-muted small mb-0">
                                        <i class="bi bi-people me-1"></i>
                                        <strong>Age Group:</strong> @announcement.AgeGroup
                                    </p>
                                }
                            </div>

                            <p class="card-text flex-grow-1">@announcement.Description</p>

                            <div class="mt-auto">
                                <a href="#" class="btn @GetCategoryButtonClass(announcement.Category) w-100">
                                    <i class="@GetCategoryButtonIcon(announcement.Category) me-1"></i>@GetCategoryButtonText(announcement.Category)
                                </a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>

    <!-- No Results Message (Hidden by default) -->
    <div class="row d-none" id="noResults">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-body text-center py-5">
                    <i class="bi bi-search display-1 text-muted"></i>
                    <h4 class="mt-3">No Events Found</h4>
                    <p class="text-muted">Try adjusting your search criteria or filters.</p>
                    <button class="btn btn-primary" id="resetSearch">
                        <i class="bi bi-arrow-clockwise me-1"></i>Reset Search
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Newsletter Subscription Section -->
    <div class="row mt-5">
        <div class="col-12">
            <div class="card bg-gradient text-white shadow-lg border-0" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
                <div class="card-body text-center py-5">
                    <i class="bi bi-envelope-heart display-4 mb-3"></i>
                    <h3 class="fw-bold mb-3">Never Miss an Update!</h3>
                    <p class="lead mb-4">Subscribe to our newsletter and get the latest news and event notifications delivered to your inbox.</p>
                    <div class="row justify-content-center">
                        <div class="col-12 col-md-8 col-lg-6">
                            <div class="input-group input-group-lg shadow">
                                <input type="email" 
                                       class="form-control" 
                                       placeholder="Enter your email address" 
                                       aria-label="Email address"
                                       id="newsletterEmail">
                                <button class="btn btn-light text-primary fw-bold" type="button">
                                    <i class="bi bi-send-fill me-1"></i>Subscribe
                                </button>
                            </div>
                            <small class="d-block mt-2 opacity-75">We respect your privacy. Unsubscribe anytime.</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@functions {
    string GetCategoryBadgeClass(CityPulse.Models.AnnouncementCategory category)
    {
        return category switch
        {
            CityPulse.Models.AnnouncementCategory.Announcement => "bg-primary",
            CityPulse.Models.AnnouncementCategory.Event => "bg-info",
            CityPulse.Models.AnnouncementCategory.ServiceUpdate => "bg-success",
            CityPulse.Models.AnnouncementCategory.Notice => "bg-notice-orange",
            CityPulse.Models.AnnouncementCategory.Program => "bg-secondary",
            CityPulse.Models.AnnouncementCategory.Emergency => "bg-danger",
            _ => "bg-secondary"
        };
    }

    string GetCategoryHeaderClass(CityPulse.Models.AnnouncementCategory category)
    {
        return category switch
        {
            CityPulse.Models.AnnouncementCategory.Announcement => "bg-primary text-white",
            CityPulse.Models.AnnouncementCategory.Event => "bg-info text-white",
            CityPulse.Models.AnnouncementCategory.ServiceUpdate => "bg-success text-white",
            CityPulse.Models.AnnouncementCategory.Notice => "bg-notice-orange text-white",
            CityPulse.Models.AnnouncementCategory.Program => "bg-secondary text-white",
            CityPulse.Models.AnnouncementCategory.Emergency => "bg-danger text-white",
            _ => "bg-secondary text-white"
        };
    }

    string GetCategoryIcon(CityPulse.Models.AnnouncementCategory category)
    {
        return category switch
        {
            CityPulse.Models.AnnouncementCategory.Announcement => "bi bi-megaphone-fill",
            CityPulse.Models.AnnouncementCategory.Event => "bi bi-people-fill",
            CityPulse.Models.AnnouncementCategory.ServiceUpdate => "bi bi-check-circle-fill",
            CityPulse.Models.AnnouncementCategory.Notice => "bi bi-exclamation-triangle-fill",
            CityPulse.Models.AnnouncementCategory.Program => "bi bi-star-fill",
            CityPulse.Models.AnnouncementCategory.Emergency => "bi bi-exclamation-octagon-fill",
            _ => "bi bi-info-circle-fill"
        };
    }

    string GetCategoryButtonClass(CityPulse.Models.AnnouncementCategory category)
    {
        return category switch
        {
            CityPulse.Models.AnnouncementCategory.Announcement => "btn-primary",
            CityPulse.Models.AnnouncementCategory.Event => "btn-info text-white",
            CityPulse.Models.AnnouncementCategory.ServiceUpdate => "btn-success",
            CityPulse.Models.AnnouncementCategory.Notice => "btn-notice-orange",
            CityPulse.Models.AnnouncementCategory.Program => "btn-secondary text-white",
            CityPulse.Models.AnnouncementCategory.Emergency => "btn-danger",
            _ => "btn-secondary"
        };
    }

    string GetCategoryButtonIcon(CityPulse.Models.AnnouncementCategory category)
    {
        return category switch
        {
            CityPulse.Models.AnnouncementCategory.Announcement => "bi bi-file-text",
            CityPulse.Models.AnnouncementCategory.Event => "bi bi-calendar-plus",
            CityPulse.Models.AnnouncementCategory.ServiceUpdate => "bi bi-download",
            CityPulse.Models.AnnouncementCategory.Notice => "bi bi-map",
            CityPulse.Models.AnnouncementCategory.Program => "bi bi-file-earmark-text",
            CityPulse.Models.AnnouncementCategory.Emergency => "bi bi-shield-exclamation",
            _ => "bi bi-info-circle"
        };
    }

    string GetCategoryButtonText(CityPulse.Models.AnnouncementCategory category)
    {
        return category switch
        {
            CityPulse.Models.AnnouncementCategory.Announcement => "Read More",
            CityPulse.Models.AnnouncementCategory.Event => "Register Now",
            CityPulse.Models.AnnouncementCategory.ServiceUpdate => "Download",
            CityPulse.Models.AnnouncementCategory.Notice => "View Map",
            CityPulse.Models.AnnouncementCategory.Program => "Apply Now",
            CityPulse.Models.AnnouncementCategory.Emergency => "Safety Guidelines",
            _ => "Learn More"
        };
    }
}

<!-- Custom Styles -->
<style>
    /* Card Hover Effects */
    .hover-lift {
        transition: all 0.3s ease;
        border: 1px solid rgba(0,0,0,0.125);
    }

    .hover-lift:hover {
        transform: translateY(-8px);
        box-shadow: 0 12px 24px rgba(0,0,0,0.15) !important;
        border-color: rgba(0,0,0,0.2);
    }

    /* Featured Card Styling */
    .featured-card {
        position: relative;
        border: 2px solid #dc3545;
        background: linear-gradient(to bottom, #fff9f9, #ffffff);
    }

    .card-ribbon {
        position: absolute;
        top: 15px;
        right: -5px;
        z-index: 1;
    }

    .card-ribbon .badge {
        font-size: 0.85rem;
        padding: 0.5rem 1rem;
        box-shadow: 0 4px 8px rgba(220, 53, 69, 0.3);
    }

    /* Filter Chip Styling */
    .filter-chip {
        transition: all 0.2s ease;
        border-radius: 20px;
        font-weight: 500;
        border: 2px solid transparent;
    }

    .filter-chip:hover {
        transform: scale(1.05);
    }

    /* Blue chip (Today) */
    .filter-chip-blue {
        background-color: #d9e6f8;
        color: #2f7fbf;
        border-color: #2f7fbf;
    }
    
    .filter-chip-blue:hover {
        background-color: #2f7fbf;
        color: white;
    }
    
    .filter-chip-blue.active {
        background-color: #2f7fbf;
        color: white;
        border-color: #2f7fbf;
    }
    
    /* Green chip (This Week) */
    .filter-chip-green {
        background-color: #d4f2db;
        color: #28a745;
        border-color: #28a745;
    }
    
    .filter-chip-green:hover {
        background-color: #28a745;
        color: white;
    }
    
    .filter-chip-green.active {
        background-color: #28a745;
        color: white;
        border-color: #28a745;
    }
    
    /* Orange chip (This Month) */
    .filter-chip-orange {
        background-color: #ffe5cc;
        color: #fd7e14;
        border-color: #fd7e14;
    }
    
    .filter-chip-orange:hover {
        background-color: #fd7e14;
        color: white;
    }
    
    .filter-chip-orange.active {
        background-color: #fd7e14;
        color: white;
        border-color: #fd7e14;
    }
    
    /* Blue Alt chip (Upcoming Events) */
    .filter-chip-blue-alt {
        background-color: #cce5ff;
        color: #007bff;
        border-color: #007bff;
    }
    
    .filter-chip-blue-alt:hover {
        background-color: #007bff;
        color: white;
    }
    
    .filter-chip-blue-alt.active {
        background-color: #007bff;
        color: white;
        border-color: #007bff;
    }

    /* Category Badge Colors */
    .bg-info { background-color: #17a2b8 !important; }
    .bg-success { background-color: #28a745 !important; }
    .bg-warning { background-color: #ffc107 !important; }
    .bg-danger { background-color: #dc3545 !important; }
    .bg-primary { background-color: #007bff !important; }
    .bg-notice-orange { background-color: #fd7e14 !important; }
    
    /* Notice Orange Button */
    .btn-notice-orange {
        background-color: #fd7e14;
        border-color: #fd7e14;
        color: white;
    }
    
    .btn-notice-orange:hover {
        background-color: #e66d0a;
        border-color: #e66d0a;
        color: white;
    }

    /* Card Body Flex Layout */
    .card-body.d-flex.flex-column {
        display: flex;
        flex-direction: column;
    }

    /* Gradient Background for Newsletter */
    .bg-gradient {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    /* Form Control Focus Effects */
    .form-control:focus, .form-select:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
    }

    /* View Toggle Buttons */
    .view-toggle {
        border-radius: 20px;
        overflow: hidden;
    }

    .view-toggle-label {
        border-radius: 0;
        min-width: 100px;
        padding: 0.375rem 1.25rem;
    }

    .view-toggle label:first-of-type {
        border-radius: 20px 0 0 20px;
    }

    .view-toggle label:last-of-type {
        border-radius: 0 20px 20px 0;
    }

    .btn-check:checked + label {
        background-color: #212529;
        color: white;
        border-color: #212529;
    }

    /* Responsive Card Heights */
    .event-card .card {
        height: 100%;
        display: flex;
        flex-direction: column;
    }

    .event-card .card-body {
        flex: 1;
    }

    /* Icon Styling */
    .bi {
        vertical-align: middle;
    }

    /* Bootstrap Icon Colors */
    .text-primary { color: #007bff !important; }
    .text-danger { color: #dc3545 !important; }
    .text-info { color: #17a2b8 !important; }
    .text-success { color: #28a745 !important; }
    .text-warning { color: #ffc107 !important; }

    /* Smooth Transitions */
    * {
        transition: all 0.2s ease;
    }

    /* Result Count Badge */
    #resultCount {
        font-size: 1rem;
        width: 2.5rem;
        height: 2.5rem;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
        padding: 0;
    }
</style>

<!-- JavaScript for Search and Filter Functionality -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        
        // Get all filter elements
        const searchInput = document.getElementById('searchInput');
        const categoryFilter = document.getElementById('categoryFilter');
        const dateFrom = document.getElementById('dateFrom');
        const dateTo = document.getElementById('dateTo');
        const clearFiltersBtn = document.getElementById('clearFilters');
        const filterChips = document.querySelectorAll('.filter-chip');
        const eventsContainer = document.getElementById('eventsContainer');
        const resultCount = document.getElementById('resultCount');
        const noResults = document.getElementById('noResults');
        const gridViewBtn = document.getElementById('gridView');
        const listViewBtn = document.getElementById('listView');

        // Search functionality
        searchInput.addEventListener('input', function() {
            filterEvents();
        });

        // Category filter
        categoryFilter.addEventListener('change', function() {
            filterEvents();
        });

        // Date filters
        dateFrom.addEventListener('change', function() {
            filterEvents();
        });

        dateTo.addEventListener('change', function() {
            filterEvents();
        });

        // Clear filters button
        clearFiltersBtn.addEventListener('click', function() {
            searchInput.value = '';
            categoryFilter.value = 'all';
            dateFrom.value = '';
            dateTo.value = '';
            filterChips.forEach(chip => chip.classList.remove('active'));
            filterEvents();
        });

        // Quick filter chips
        filterChips.forEach(chip => {
            chip.addEventListener('click', function() {
                filterChips.forEach(c => c.classList.remove('active'));
                this.classList.add('active');
                
                const filter = this.dataset.filter;
                const today = new Date();
                
                switch(filter) {
                    case 'today':
                        dateFrom.value = today.toISOString().split('T')[0];
                        dateTo.value = today.toISOString().split('T')[0];
                        break;
                    case 'this-week':
                        const startOfWeek = new Date(today);
                        startOfWeek.setDate(today.getDate() - today.getDay());
                        const endOfWeek = new Date(startOfWeek);
                        endOfWeek.setDate(startOfWeek.getDate() + 6);
                        dateFrom.value = startOfWeek.toISOString().split('T')[0];
                        dateTo.value = endOfWeek.toISOString().split('T')[0];
                        break;
                    case 'this-month':
                        const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
                        const endOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0);
                        dateFrom.value = startOfMonth.toISOString().split('T')[0];
                        dateTo.value = endOfMonth.toISOString().split('T')[0];
                        break;
                    case 'upcoming':
                        dateFrom.value = today.toISOString().split('T')[0];
                        dateTo.value = '';
                        break;
                }
                
                filterEvents();
            });
        });

        // View toggle
        gridViewBtn.addEventListener('change', function() {
            if (this.checked) {
                eventsContainer.className = 'row g-4';
            }
        });

        listViewBtn.addEventListener('change', function() {
            if (this.checked) {
                eventsContainer.className = 'row g-2';
            }
        });

        // Main filter function
        function filterEvents() {
            const searchTerm = searchInput.value.toLowerCase();
            const selectedCategory = categoryFilter.value;
            const fromDate = dateFrom.value;
            const toDate = dateTo.value;
            
            const eventCards = document.querySelectorAll('.event-card');
            let visibleCount = 0;

            eventCards.forEach(card => {
                const cardCategory = card.dataset.category;
                const cardDate = card.dataset.date;
                const cardText = card.textContent.toLowerCase();
                
                let showCard = true;
                
                // Search filter
                if (searchTerm && !cardText.includes(searchTerm)) {
                    showCard = false;
                }
                
                // Category filter
                if (selectedCategory !== 'all' && cardCategory !== selectedCategory.toLowerCase()) {
                    showCard = false;
                }
                
                // Date filter
                if (fromDate && cardDate < fromDate) {
                    showCard = false;
                }
                if (toDate && cardDate > toDate) {
                    showCard = false;
                }
                
                if (showCard) {
                    card.style.display = 'block';
                    visibleCount++;
                } else {
                    card.style.display = 'none';
                }
            });

            // Update result count
            resultCount.textContent = visibleCount;

            // Show/hide no results message
            if (visibleCount === 0) {
                eventsContainer.classList.add('d-none');
                noResults.classList.remove('d-none');
            } else {
                eventsContainer.classList.remove('d-none');
                noResults.classList.add('d-none');
            }
        }

        // Reset search button
        document.getElementById('resetSearch')?.addEventListener('click', function() {
            clearFiltersBtn.click();
        });

        // Initialize
        console.log('News & Announcements page initialized');
        console.log('Total events loaded:', document.querySelectorAll('.event-card').length);
    });
</script>